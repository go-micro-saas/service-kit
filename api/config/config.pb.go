// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.6
// source: api/config/config.proto

package configs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Bootstrap 配置引导
type Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App 应用
	App *App `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// Setting 配置
	Setting *Setting `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
	// http http服务配置
	Http *HTTP `protobuf:"bytes,100,opt,name=http,proto3" json:"http,omitempty"`
	// grpc grpc服务配置
	Grpc *GRPC `protobuf:"bytes,101,opt,name=grpc,proto3" json:"grpc,omitempty"`
	// log 日志
	Log *Log `protobuf:"bytes,200,opt,name=log,proto3" json:"log,omitempty"`
	// mysql data
	Mysql    *MySQL    `protobuf:"bytes,301,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Psql     *PSQL     `protobuf:"bytes,302,opt,name=psql,proto3" json:"psql,omitempty"`
	Redis    *Redis    `protobuf:"bytes,303,opt,name=redis,proto3" json:"redis,omitempty"`
	Rabbitmq *Rabbitmq `protobuf:"bytes,304,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	Consul   *Consul   `protobuf:"bytes,305,opt,name=consul,proto3" json:"consul,omitempty"`
	Jaeger   *Jaeger   `protobuf:"bytes,306,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	// snowflake id
	Snowflake *Snowflake `protobuf:"bytes,400,opt,name=snowflake,proto3" json:"snowflake,omitempty"`
	// Captcha 验证码
	Captcha *Captcha `protobuf:"bytes,500,opt,name=captcha,proto3" json:"captcha,omitempty"`
	// Login 登录
	Login *Login `protobuf:"bytes,501,opt,name=login,proto3" json:"login,omitempty"`
	// secret 密码
	EncryptSecret *EncryptSecret `protobuf:"bytes,102,opt,name=encrypt_secret,json=encryptSecret,proto3" json:"encrypt_secret,omitempty"`
	// client_api 应用程序接口
	ClientApi *ClientApi `protobuf:"bytes,50,opt,name=client_api,json=clientApi,proto3" json:"client_api,omitempty"`
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Bootstrap) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *Bootstrap) GetHttp() *HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Bootstrap) GetGrpc() *GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *Bootstrap) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Bootstrap) GetMysql() *MySQL {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *Bootstrap) GetPsql() *PSQL {
	if x != nil {
		return x.Psql
	}
	return nil
}

func (x *Bootstrap) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Bootstrap) GetRabbitmq() *Rabbitmq {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Bootstrap) GetConsul() *Consul {
	if x != nil {
		return x.Consul
	}
	return nil
}

func (x *Bootstrap) GetJaeger() *Jaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

func (x *Bootstrap) GetSnowflake() *Snowflake {
	if x != nil {
		return x.Snowflake
	}
	return nil
}

func (x *Bootstrap) GetCaptcha() *Captcha {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *Bootstrap) GetLogin() *Login {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *Bootstrap) GetEncryptSecret() *EncryptSecret {
	if x != nil {
		return x.EncryptSecret
	}
	return nil
}

func (x *Bootstrap) GetClientApi() *ClientApi {
	if x != nil {
		return x.ClientApi
	}
	return nil
}

// App application
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_name 项目名称；例：my-saas-platform
	ProjectName string `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// server_name 服务app名字；例：saas-ping-server
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// server_env app 环境
	ServerEnv string `protobuf:"bytes,3,opt,name=server_env,json=serverEnv,proto3" json:"server_env,omitempty"`
	// server_version app版本
	ServerVersion string `protobuf:"bytes,4,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	// http_endpoints app站点
	HttpEndpoints []string `protobuf:"bytes,6,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	GrpcEndpoints []string `protobuf:"bytes,7,rep,name=grpc_endpoints,json=grpcEndpoints,proto3" json:"grpc_endpoints,omitempty"`
	// metadata 元数据
	Metadata map[string]string `protobuf:"bytes,100,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *App) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *App) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *App) GetServerEnv() string {
	if x != nil {
		return x.ServerEnv
	}
	return ""
}

func (x *App) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *App) GetHttpEndpoints() []string {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

func (x *App) GetGrpcEndpoints() []string {
	if x != nil {
		return x.GrpcEndpoints
	}
	return nil
}

func (x *App) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Setting 设置
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable_service_registry 启用服务注册与发现
	EnableServiceRegistry bool `protobuf:"varint,1,opt,name=enable_service_registry,json=enableServiceRegistry,proto3" json:"enable_service_registry,omitempty"`
	// enable_migrate_db 启用数据库迁移
	EnableMigrateDb bool `protobuf:"varint,4,opt,name=enable_migrate_db,json=enableMigrateDb,proto3" json:"enable_migrate_db,omitempty"`
	// enable_schedule_task 启用定时任务、计划任务
	EnableScheduleTask bool `protobuf:"varint,5,opt,name=enable_schedule_task,json=enableScheduleTask,proto3" json:"enable_schedule_task,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Setting) GetEnableServiceRegistry() bool {
	if x != nil {
		return x.EnableServiceRegistry
	}
	return false
}

func (x *Setting) GetEnableMigrateDb() bool {
	if x != nil {
		return x.EnableMigrateDb
	}
	return false
}

func (x *Setting) GetEnableScheduleTask() bool {
	if x != nil {
		return x.EnableScheduleTask
	}
	return false
}

// HTTP http服务配置
type HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable bool `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	// network 网络
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// addr 地址
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// timeout 超时时间(s)
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *HTTP) Reset() {
	*x = HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTP) ProtoMessage() {}

func (x *HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTP.ProtoReflect.Descriptor instead.
func (*HTTP) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *HTTP) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// GRPC grpc服务配置
type GRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable bool `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	// network 网络
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// addr 地址
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// timeout 超时时间(s)
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *GRPC) Reset() {
	*x = GRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPC) ProtoMessage() {}

func (x *GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPC.ProtoReflect.Descriptor instead.
func (*GRPC) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *GRPC) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// console 输出到控制台
	Console *Log_Console `protobuf:"bytes,1,opt,name=console,proto3" json:"console,omitempty"`
	// file 输出到文件
	File *Log_File `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *Log) GetConsole() *Log_Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *Log) GetFile() *Log_File {
	if x != nil {
		return x.File
	}
	return nil
}

// MySQL MySQL
type MySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Dsn    string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	// slow_threshold 慢查询(s)
	SlowThreshold  *durationpb.Duration `protobuf:"bytes,2,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
	LoggerEnable   bool                 `protobuf:"varint,3,opt,name=logger_enable,json=loggerEnable,proto3" json:"logger_enable,omitempty"`
	LoggerColorful bool                 `protobuf:"varint,4,opt,name=logger_colorful,json=loggerColorful,proto3" json:"logger_colorful,omitempty"`
	// logger_level 日志级别；值：DEBUG、INFO、WARN、ERROR、FATAL
	LoggerLevel string `protobuf:"bytes,5,opt,name=logger_level,json=loggerLevel,proto3" json:"logger_level,omitempty"`
	// conn_max_active 连接可复用的最大时间
	ConnMaxActive uint32 `protobuf:"varint,6,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`
	// conn_max_lifetime 可复用的最大时间(s)
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
	// conn_max_idle 连接池中空闲连接的最大数量
	ConnMaxIdle uint32 `protobuf:"varint,8,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`
	// conn_max_idle_time 设置连接空闲的最长时间(s)
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
}

func (x *MySQL) Reset() {
	*x = MySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQL) ProtoMessage() {}

func (x *MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQL.ProtoReflect.Descriptor instead.
func (*MySQL) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *MySQL) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MySQL) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *MySQL) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

func (x *MySQL) GetLoggerEnable() bool {
	if x != nil {
		return x.LoggerEnable
	}
	return false
}

func (x *MySQL) GetLoggerColorful() bool {
	if x != nil {
		return x.LoggerColorful
	}
	return false
}

func (x *MySQL) GetLoggerLevel() string {
	if x != nil {
		return x.LoggerLevel
	}
	return ""
}

func (x *MySQL) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *MySQL) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *MySQL) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *MySQL) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// Redis redis
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable       bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Addresses    []string             `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Username     string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password     string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db           uint32               `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	DialTimeout  *durationpb.Duration `protobuf:"bytes,5,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`    // (s)
	ReadTimeout  *durationpb.Duration `protobuf:"bytes,6,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`    // (s)
	WriteTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"` // (s)
	// conn_max_active 连接的最大数量
	ConnMaxActive uint32 `protobuf:"varint,8,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`
	// conn_max_lifetime 连接可复用的最大时间(s)
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
	// conn_max_idle 连接池中空闲连接的最大数量
	ConnMaxIdle uint32 `protobuf:"varint,10,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`
	ConnMinIdle uint32 `protobuf:"varint,11,opt,name=conn_min_idle,json=connMinIdle,proto3" json:"conn_min_idle,omitempty"`
	// conn_max_idle_time 设置连接空闲的最长时间(s)
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,12,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Redis) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Redis) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() uint32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Redis) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *Redis) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *Redis) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *Redis) GetConnMinIdle() uint32 {
	if x != nil {
		return x.ConnMinIdle
	}
	return 0
}

func (x *Redis) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// PSQL postgres
type PSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Dsn    string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	// slow_threshold 慢查询(s)
	SlowThreshold  *durationpb.Duration `protobuf:"bytes,2,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
	LoggerEnable   bool                 `protobuf:"varint,3,opt,name=logger_enable,json=loggerEnable,proto3" json:"logger_enable,omitempty"`
	LoggerColorful bool                 `protobuf:"varint,4,opt,name=logger_colorful,json=loggerColorful,proto3" json:"logger_colorful,omitempty"`
	// logger_level 日志级别；值：DEBUG、INFO、WARN、ERROR、FATAL
	LoggerLevel string `protobuf:"bytes,5,opt,name=logger_level,json=loggerLevel,proto3" json:"logger_level,omitempty"`
	// conn_max_active 连接可复用的最大时间
	ConnMaxActive uint32 `protobuf:"varint,6,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`
	// conn_max_lifetime 可复用的最大时间(s)
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
	// conn_max_idle 连接池中空闲连接的最大数量
	ConnMaxIdle uint32 `protobuf:"varint,8,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`
	// conn_max_idle_time 设置连接空闲的最长时间(s)
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
}

func (x *PSQL) Reset() {
	*x = PSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSQL) ProtoMessage() {}

func (x *PSQL) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSQL.ProtoReflect.Descriptor instead.
func (*PSQL) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *PSQL) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PSQL) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *PSQL) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

func (x *PSQL) GetLoggerEnable() bool {
	if x != nil {
		return x.LoggerEnable
	}
	return false
}

func (x *PSQL) GetLoggerColorful() bool {
	if x != nil {
		return x.LoggerColorful
	}
	return false
}

func (x *PSQL) GetLoggerLevel() string {
	if x != nil {
		return x.LoggerLevel
	}
	return ""
}

func (x *PSQL) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *PSQL) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *PSQL) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *PSQL) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// Consul consul
type Consul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable             bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Scheme             string               `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Address            string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PathPrefix         string               `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	Datacenter         string               `protobuf:"bytes,4,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	WaitTime           *durationpb.Duration `protobuf:"bytes,5,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"` // (s)
	Token              string               `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Namespace          string               `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Partition          string               `protobuf:"bytes,8,opt,name=partition,proto3" json:"partition,omitempty"`
	WithHttpBasicAuth  bool                 `protobuf:"varint,9,opt,name=with_http_basic_auth,json=withHttpBasicAuth,proto3" json:"with_http_basic_auth,omitempty"`
	AuthUsername       string               `protobuf:"bytes,10,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword       string               `protobuf:"bytes,11,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	InsecureSkipVerify bool                 `protobuf:"varint,12,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	TlsAddress         string               `protobuf:"bytes,13,opt,name=tls_address,json=tlsAddress,proto3" json:"tls_address,omitempty"`
	TlsCaPem           string               `protobuf:"bytes,14,opt,name=tls_ca_pem,json=tlsCaPem,proto3" json:"tls_ca_pem,omitempty"`
	TlsCertPem         string               `protobuf:"bytes,15,opt,name=tls_cert_pem,json=tlsCertPem,proto3" json:"tls_cert_pem,omitempty"`
	TlsKeyPem          string               `protobuf:"bytes,16,opt,name=tls_key_pem,json=tlsKeyPem,proto3" json:"tls_key_pem,omitempty"`
}

func (x *Consul) Reset() {
	*x = Consul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul) ProtoMessage() {}

func (x *Consul) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul.ProtoReflect.Descriptor instead.
func (*Consul) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *Consul) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Consul) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Consul) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Consul) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Consul) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

func (x *Consul) GetWaitTime() *durationpb.Duration {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

func (x *Consul) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Consul) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Consul) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Consul) GetWithHttpBasicAuth() bool {
	if x != nil {
		return x.WithHttpBasicAuth
	}
	return false
}

func (x *Consul) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *Consul) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *Consul) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *Consul) GetTlsAddress() string {
	if x != nil {
		return x.TlsAddress
	}
	return ""
}

func (x *Consul) GetTlsCaPem() string {
	if x != nil {
		return x.TlsCaPem
	}
	return ""
}

func (x *Consul) GetTlsCertPem() string {
	if x != nil {
		return x.TlsCertPem
	}
	return ""
}

func (x *Consul) GetTlsKeyPem() string {
	if x != nil {
		return x.TlsKeyPem
	}
	return ""
}

// Jaeger jaeger
type Jaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable            bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Endpoint          string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	WithHttpBasicAuth bool   `protobuf:"varint,2,opt,name=with_http_basic_auth,json=withHttpBasicAuth,proto3" json:"with_http_basic_auth,omitempty"`
	Username          string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password          string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Jaeger) Reset() {
	*x = Jaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jaeger) ProtoMessage() {}

func (x *Jaeger) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jaeger.ProtoReflect.Descriptor instead.
func (*Jaeger) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *Jaeger) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Jaeger) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Jaeger) GetWithHttpBasicAuth() bool {
	if x != nil {
		return x.WithHttpBasicAuth
	}
	return false
}

func (x *Jaeger) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jaeger) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// RabbitMQ rabbitmq
type Rabbitmq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable     bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TlsAddress string `protobuf:"bytes,2,opt,name=tls_address,json=tlsAddress,proto3" json:"tls_address,omitempty"`
	TlsCaPem   string `protobuf:"bytes,3,opt,name=tls_ca_pem,json=tlsCaPem,proto3" json:"tls_ca_pem,omitempty"`
	TlsCertPem string `protobuf:"bytes,4,opt,name=tls_cert_pem,json=tlsCertPem,proto3" json:"tls_cert_pem,omitempty"`
	TlsKeyPem  string `protobuf:"bytes,5,opt,name=tls_key_pem,json=tlsKeyPem,proto3" json:"tls_key_pem,omitempty"`
}

func (x *Rabbitmq) Reset() {
	*x = Rabbitmq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rabbitmq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rabbitmq) ProtoMessage() {}

func (x *Rabbitmq) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rabbitmq.ProtoReflect.Descriptor instead.
func (*Rabbitmq) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *Rabbitmq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Rabbitmq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Rabbitmq) GetTlsAddress() string {
	if x != nil {
		return x.TlsAddress
	}
	return ""
}

func (x *Rabbitmq) GetTlsCaPem() string {
	if x != nil {
		return x.TlsCaPem
	}
	return ""
}

func (x *Rabbitmq) GetTlsCertPem() string {
	if x != nil {
		return x.TlsCertPem
	}
	return ""
}

func (x *Rabbitmq) GetTlsKeyPem() string {
	if x != nil {
		return x.TlsKeyPem
	}
	return ""
}

// Snowflake snowflake
type Snowflake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable            bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Endpoint          string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	WithDiscovery     bool   `protobuf:"varint,2,opt,name=with_discovery,json=withDiscovery,proto3" json:"with_discovery,omitempty"`
	WithHttpBasicAuth bool   `protobuf:"varint,3,opt,name=with_http_basic_auth,json=withHttpBasicAuth,proto3" json:"with_http_basic_auth,omitempty"`
	Username          string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password          string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Snowflake) Reset() {
	*x = Snowflake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snowflake) ProtoMessage() {}

func (x *Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snowflake.ProtoReflect.Descriptor instead.
func (*Snowflake) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *Snowflake) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Snowflake) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Snowflake) GetWithDiscovery() bool {
	if x != nil {
		return x.WithDiscovery
	}
	return false
}

func (x *Snowflake) GetWithHttpBasicAuth() bool {
	if x != nil {
		return x.WithHttpBasicAuth
	}
	return false
}

func (x *Snowflake) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Snowflake) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Captcha 验证码
type Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptchaLen uint32               `protobuf:"varint,1,opt,name=captcha_len,json=captchaLen,proto3" json:"captcha_len,omitempty"` // 验证码长度
	CaptchaTtl *durationpb.Duration `protobuf:"bytes,2,opt,name=captcha_ttl,json=captchaTtl,proto3" json:"captcha_ttl,omitempty"`  // 验证码有效时间(s)
}

func (x *Captcha) Reset() {
	*x = Captcha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha) ProtoMessage() {}

func (x *Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha.ProtoReflect.Descriptor instead.
func (*Captcha) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *Captcha) GetCaptchaLen() uint32 {
	if x != nil {
		return x.CaptchaLen
	}
	return 0
}

func (x *Captcha) GetCaptchaTtl() *durationpb.Duration {
	if x != nil {
		return x.CaptchaTtl
	}
	return nil
}

// Login 登录
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 密码连续输错N次后短暂锁定账号
	PasswordErrSerialTimes uint32 `protobuf:"varint,1,opt,name=password_err_serial_times,json=passwordErrSerialTimes,proto3" json:"password_err_serial_times,omitempty"`
	// N分钟内连续输出密码(s)
	PasswordErrSerialDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=password_err_serial_duration,json=passwordErrSerialDuration,proto3" json:"password_err_serial_duration,omitempty"`
	// 密码连续错误后,锁定N分钟后重试(s)
	PasswordErrLockDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=password_err_lock_duration,json=passwordErrLockDuration,proto3" json:"password_err_lock_duration,omitempty"`
	// 当日密码错误上限
	PasswordErrDailyLimitTimes uint32 `protobuf:"varint,4,opt,name=password_err_daily_limit_times,json=passwordErrDailyLimitTimes,proto3" json:"password_err_daily_limit_times,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{14}
}

func (x *Login) GetPasswordErrSerialTimes() uint32 {
	if x != nil {
		return x.PasswordErrSerialTimes
	}
	return 0
}

func (x *Login) GetPasswordErrSerialDuration() *durationpb.Duration {
	if x != nil {
		return x.PasswordErrSerialDuration
	}
	return nil
}

func (x *Login) GetPasswordErrLockDuration() *durationpb.Duration {
	if x != nil {
		return x.PasswordErrLockDuration
	}
	return nil
}

func (x *Login) GetPasswordErrDailyLimitTimes() uint32 {
	if x != nil {
		return x.PasswordErrDailyLimitTimes
	}
	return 0
}

// EncryptSecret ...
type EncryptSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferEncrypt *EncryptSecret_TransferEncrypt `protobuf:"bytes,1,opt,name=transfer_encrypt,json=transferEncrypt,proto3" json:"transfer_encrypt,omitempty"`
	ServiceEncrypt  *EncryptSecret_ServiceEncrypt  `protobuf:"bytes,2,opt,name=service_encrypt,json=serviceEncrypt,proto3" json:"service_encrypt,omitempty"`
	TokenEncrypt    *EncryptSecret_TokenEncrypt    `protobuf:"bytes,3,opt,name=token_encrypt,json=tokenEncrypt,proto3" json:"token_encrypt,omitempty"`
}

func (x *EncryptSecret) Reset() {
	*x = EncryptSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecret) ProtoMessage() {}

func (x *EncryptSecret) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecret.ProtoReflect.Descriptor instead.
func (*EncryptSecret) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *EncryptSecret) GetTransferEncrypt() *EncryptSecret_TransferEncrypt {
	if x != nil {
		return x.TransferEncrypt
	}
	return nil
}

func (x *EncryptSecret) GetServiceEncrypt() *EncryptSecret_ServiceEncrypt {
	if x != nil {
		return x.ServiceEncrypt
	}
	return nil
}

func (x *EncryptSecret) GetTokenEncrypt() *EncryptSecret_TokenEncrypt {
	if x != nil {
		return x.TokenEncrypt
	}
	return nil
}

// ClientApi 客户端api
type ClientApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterService []*ClientApi_Endpoint `protobuf:"bytes,1,rep,name=cluster_service,json=clusterService,proto3" json:"cluster_service,omitempty"`
	ThirdParty     []*ClientApi_Endpoint `protobuf:"bytes,2,rep,name=third_party,json=thirdParty,proto3" json:"third_party,omitempty"`
}

func (x *ClientApi) Reset() {
	*x = ClientApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientApi) ProtoMessage() {}

func (x *ClientApi) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientApi.ProtoReflect.Descriptor instead.
func (*ClientApi) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *ClientApi) GetClusterService() []*ClientApi_Endpoint {
	if x != nil {
		return x.ClusterService
	}
	return nil
}

func (x *ClientApi) GetThirdParty() []*ClientApi_Endpoint {
	if x != nil {
		return x.ThirdParty
	}
	return nil
}

// Console 输出到控制台
type Log_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启用
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// level 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Log_Console) Reset() {
	*x = Log_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Console) ProtoMessage() {}

func (x *Log_Console) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Console.ProtoReflect.Descriptor instead.
func (*Log_Console) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Log_Console) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Console) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

// File 输出到文件
type Log_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启用
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// level 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// dir 存储目录
	Dir string `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	// filename 文件名(默认：${filename}_app.%Y%m%d%H%M%S.log)
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	// rotate_time 轮询规则：n久(默认：86400s # 86400s = 1天)
	// 轮询规则：默认为：rotate_time(s)
	RotateTime *durationpb.Duration `protobuf:"bytes,5,opt,name=rotate_time,json=rotateTime,proto3" json:"rotate_time,omitempty"`
	// rotate_size 轮询规则：按文件大小(默认：52428800 # 50<<20 = 50M)
	// 轮询规则：默认为：rotate_time
	RotateSize int64 `protobuf:"varint,6,opt,name=rotate_size,json=rotateSize,proto3" json:"rotate_size,omitempty"`
	// storage_age 存储n久(默认：2592000s = 30天)
	// 存储规则：默认为：storage_age(s)
	StorageAge *durationpb.Duration `protobuf:"bytes,8,opt,name=storage_age,json=storageAge,proto3" json:"storage_age,omitempty"`
	// storage_counter 存储：n个 或 有效期storage_age(默认：2592000s = 30天)
	// 存储规则：默认为：storage_age
	StorageCounter uint32 `protobuf:"varint,7,opt,name=storage_counter,json=storageCounter,proto3" json:"storage_counter,omitempty"`
}

func (x *Log_File) Reset() {
	*x = Log_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_File) ProtoMessage() {}

func (x *Log_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_File.ProtoReflect.Descriptor instead.
func (*Log_File) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Log_File) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_File) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_File) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *Log_File) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Log_File) GetRotateTime() *durationpb.Duration {
	if x != nil {
		return x.RotateTime
	}
	return nil
}

func (x *Log_File) GetRotateSize() int64 {
	if x != nil {
		return x.RotateSize
	}
	return 0
}

func (x *Log_File) GetStorageAge() *durationpb.Duration {
	if x != nil {
		return x.StorageAge
	}
	return nil
}

func (x *Log_File) GetStorageCounter() uint32 {
	if x != nil {
		return x.StorageCounter
	}
	return 0
}

// TransferEncrypt 非对称加密传输,主要用于密码传递等,防止传递过程中明文信息被log,导致泄露
type EncryptSecret_TransferEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *EncryptSecret_TransferEncrypt) Reset() {
	*x = EncryptSecret_TransferEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecret_TransferEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecret_TransferEncrypt) ProtoMessage() {}

func (x *EncryptSecret_TransferEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecret_TransferEncrypt.ProtoReflect.Descriptor instead.
func (*EncryptSecret_TransferEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15, 0}
}

func (x *EncryptSecret_TransferEncrypt) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *EncryptSecret_TransferEncrypt) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// ServiceEncrypt 非对称加密传输,主要用于服务请求鉴权,服务间的鉴权
type EncryptSecret_ServiceEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *EncryptSecret_ServiceEncrypt) Reset() {
	*x = EncryptSecret_ServiceEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecret_ServiceEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecret_ServiceEncrypt) ProtoMessage() {}

func (x *EncryptSecret_ServiceEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecret_ServiceEncrypt.ProtoReflect.Descriptor instead.
func (*EncryptSecret_ServiceEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15, 1}
}

func (x *EncryptSecret_ServiceEncrypt) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *EncryptSecret_ServiceEncrypt) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// TokenEncrypt token
type EncryptSecret_TokenEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignKey    string `protobuf:"bytes,1,opt,name=sign_key,json=signKey,proto3" json:"sign_key,omitempty"`
	RefreshKey string `protobuf:"bytes,2,opt,name=refresh_key,json=refreshKey,proto3" json:"refresh_key,omitempty"`
}

func (x *EncryptSecret_TokenEncrypt) Reset() {
	*x = EncryptSecret_TokenEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecret_TokenEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecret_TokenEncrypt) ProtoMessage() {}

func (x *EncryptSecret_TokenEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecret_TokenEncrypt.ProtoReflect.Descriptor instead.
func (*EncryptSecret_TokenEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15, 2}
}

func (x *EncryptSecret_TokenEncrypt) GetSignKey() string {
	if x != nil {
		return x.SignKey
	}
	return ""
}

func (x *EncryptSecret_TokenEncrypt) GetRefreshKey() string {
	if x != nil {
		return x.RefreshKey
	}
	return ""
}

type ClientApi_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegistryName string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	HttpHost     string `protobuf:"bytes,3,opt,name=http_host,json=httpHost,proto3" json:"http_host,omitempty"`
	GrpcHost     string `protobuf:"bytes,4,opt,name=grpc_host,json=grpcHost,proto3" json:"grpc_host,omitempty"`
}

func (x *ClientApi_Endpoint) Reset() {
	*x = ClientApi_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientApi_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientApi_Endpoint) ProtoMessage() {}

func (x *ClientApi_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientApi_Endpoint.ProtoReflect.Descriptor instead.
func (*ClientApi_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ClientApi_Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientApi_Endpoint) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

func (x *ClientApi_Endpoint) GetHttpHost() string {
	if x != nil {
		return x.HttpHost
	}
	return ""
}

func (x *ClientApi_Endpoint) GetGrpcHost() string {
	if x != nil {
		return x.GrpcHost
	}
	return ""
}

var File_api_config_config_proto protoreflect.FileDescriptor

var file_api_config_config_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfd, 0x06, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x2b, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x52, 0x04, 0x67,
	0x72, 0x70, 0x63, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f,
	0x67, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x05,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x73, 0x71, 0x6c, 0x18, 0xae, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x50, 0x53, 0x51, 0x4c,
	0x52, 0x04, 0x70, 0x73, 0x71, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18,
	0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x52, 0x08, 0x72,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x12, 0x35,
	0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12,
	0x32, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x69, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x22,
	0xdf, 0x02, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x62, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0xa4, 0x02,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xbf, 0x03, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6c, 0x6f,
	0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x46,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64, 0x62, 0x12, 0x3c,
	0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x6c,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x04, 0x50, 0x53,
	0x51, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x40, 0x0a, 0x0e,
	0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x48, 0x74,
	0x74, 0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6c,
	0x73, 0x43, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x06, 0x4a, 0x61, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x48, 0x74, 0x74, 0x70, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xb5, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6c,
	0x73, 0x43, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x53, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x66, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x54,
	0x74, 0x6c, 0x22, 0xba, 0x02, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x19,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x45, 0x72, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x94, 0x04, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x5e, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x55,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x1a, 0x51, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x50, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x4a, 0x0a, 0x0c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x22, 0xa8, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x69, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x1a, 0x7d, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x48, 0x6f, 0x73,
	0x74, 0x42, 0x64, 0x0a, 0x14, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x11, 0x53, 0x61, 0x61, 0x73, 0x41,
	0x70, 0x69, 0x4b, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x01, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_config_config_proto_rawDescOnce sync.Once
	file_api_config_config_proto_rawDescData = file_api_config_config_proto_rawDesc
)

func file_api_config_config_proto_rawDescGZIP() []byte {
	file_api_config_config_proto_rawDescOnce.Do(func() {
		file_api_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_config_config_proto_rawDescData)
	})
	return file_api_config_config_proto_rawDescData
}

var file_api_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_config_config_proto_goTypes = []interface{}{
	(*Bootstrap)(nil),                     // 0: saas.api.kit.configs.Bootstrap
	(*App)(nil),                           // 1: saas.api.kit.configs.App
	(*Setting)(nil),                       // 2: saas.api.kit.configs.Setting
	(*HTTP)(nil),                          // 3: saas.api.kit.configs.HTTP
	(*GRPC)(nil),                          // 4: saas.api.kit.configs.GRPC
	(*Log)(nil),                           // 5: saas.api.kit.configs.Log
	(*MySQL)(nil),                         // 6: saas.api.kit.configs.MySQL
	(*Redis)(nil),                         // 7: saas.api.kit.configs.Redis
	(*PSQL)(nil),                          // 8: saas.api.kit.configs.PSQL
	(*Consul)(nil),                        // 9: saas.api.kit.configs.Consul
	(*Jaeger)(nil),                        // 10: saas.api.kit.configs.Jaeger
	(*Rabbitmq)(nil),                      // 11: saas.api.kit.configs.Rabbitmq
	(*Snowflake)(nil),                     // 12: saas.api.kit.configs.Snowflake
	(*Captcha)(nil),                       // 13: saas.api.kit.configs.Captcha
	(*Login)(nil),                         // 14: saas.api.kit.configs.Login
	(*EncryptSecret)(nil),                 // 15: saas.api.kit.configs.EncryptSecret
	(*ClientApi)(nil),                     // 16: saas.api.kit.configs.ClientApi
	nil,                                   // 17: saas.api.kit.configs.App.MetadataEntry
	(*Log_Console)(nil),                   // 18: saas.api.kit.configs.Log.Console
	(*Log_File)(nil),                      // 19: saas.api.kit.configs.Log.File
	(*EncryptSecret_TransferEncrypt)(nil), // 20: saas.api.kit.configs.EncryptSecret.TransferEncrypt
	(*EncryptSecret_ServiceEncrypt)(nil),  // 21: saas.api.kit.configs.EncryptSecret.ServiceEncrypt
	(*EncryptSecret_TokenEncrypt)(nil),    // 22: saas.api.kit.configs.EncryptSecret.TokenEncrypt
	(*ClientApi_Endpoint)(nil),            // 23: saas.api.kit.configs.ClientApi.Endpoint
	(*durationpb.Duration)(nil),           // 24: google.protobuf.Duration
}
var file_api_config_config_proto_depIdxs = []int32{
	1,  // 0: saas.api.kit.configs.Bootstrap.app:type_name -> saas.api.kit.configs.App
	2,  // 1: saas.api.kit.configs.Bootstrap.setting:type_name -> saas.api.kit.configs.Setting
	3,  // 2: saas.api.kit.configs.Bootstrap.http:type_name -> saas.api.kit.configs.HTTP
	4,  // 3: saas.api.kit.configs.Bootstrap.grpc:type_name -> saas.api.kit.configs.GRPC
	5,  // 4: saas.api.kit.configs.Bootstrap.log:type_name -> saas.api.kit.configs.Log
	6,  // 5: saas.api.kit.configs.Bootstrap.mysql:type_name -> saas.api.kit.configs.MySQL
	8,  // 6: saas.api.kit.configs.Bootstrap.psql:type_name -> saas.api.kit.configs.PSQL
	7,  // 7: saas.api.kit.configs.Bootstrap.redis:type_name -> saas.api.kit.configs.Redis
	11, // 8: saas.api.kit.configs.Bootstrap.rabbitmq:type_name -> saas.api.kit.configs.Rabbitmq
	9,  // 9: saas.api.kit.configs.Bootstrap.consul:type_name -> saas.api.kit.configs.Consul
	10, // 10: saas.api.kit.configs.Bootstrap.jaeger:type_name -> saas.api.kit.configs.Jaeger
	12, // 11: saas.api.kit.configs.Bootstrap.snowflake:type_name -> saas.api.kit.configs.Snowflake
	13, // 12: saas.api.kit.configs.Bootstrap.captcha:type_name -> saas.api.kit.configs.Captcha
	14, // 13: saas.api.kit.configs.Bootstrap.login:type_name -> saas.api.kit.configs.Login
	15, // 14: saas.api.kit.configs.Bootstrap.encrypt_secret:type_name -> saas.api.kit.configs.EncryptSecret
	16, // 15: saas.api.kit.configs.Bootstrap.client_api:type_name -> saas.api.kit.configs.ClientApi
	17, // 16: saas.api.kit.configs.App.metadata:type_name -> saas.api.kit.configs.App.MetadataEntry
	24, // 17: saas.api.kit.configs.HTTP.timeout:type_name -> google.protobuf.Duration
	24, // 18: saas.api.kit.configs.GRPC.timeout:type_name -> google.protobuf.Duration
	18, // 19: saas.api.kit.configs.Log.console:type_name -> saas.api.kit.configs.Log.Console
	19, // 20: saas.api.kit.configs.Log.file:type_name -> saas.api.kit.configs.Log.File
	24, // 21: saas.api.kit.configs.MySQL.slow_threshold:type_name -> google.protobuf.Duration
	24, // 22: saas.api.kit.configs.MySQL.conn_max_lifetime:type_name -> google.protobuf.Duration
	24, // 23: saas.api.kit.configs.MySQL.conn_max_idle_time:type_name -> google.protobuf.Duration
	24, // 24: saas.api.kit.configs.Redis.dial_timeout:type_name -> google.protobuf.Duration
	24, // 25: saas.api.kit.configs.Redis.read_timeout:type_name -> google.protobuf.Duration
	24, // 26: saas.api.kit.configs.Redis.write_timeout:type_name -> google.protobuf.Duration
	24, // 27: saas.api.kit.configs.Redis.conn_max_lifetime:type_name -> google.protobuf.Duration
	24, // 28: saas.api.kit.configs.Redis.conn_max_idle_time:type_name -> google.protobuf.Duration
	24, // 29: saas.api.kit.configs.PSQL.slow_threshold:type_name -> google.protobuf.Duration
	24, // 30: saas.api.kit.configs.PSQL.conn_max_lifetime:type_name -> google.protobuf.Duration
	24, // 31: saas.api.kit.configs.PSQL.conn_max_idle_time:type_name -> google.protobuf.Duration
	24, // 32: saas.api.kit.configs.Consul.wait_time:type_name -> google.protobuf.Duration
	24, // 33: saas.api.kit.configs.Captcha.captcha_ttl:type_name -> google.protobuf.Duration
	24, // 34: saas.api.kit.configs.Login.password_err_serial_duration:type_name -> google.protobuf.Duration
	24, // 35: saas.api.kit.configs.Login.password_err_lock_duration:type_name -> google.protobuf.Duration
	20, // 36: saas.api.kit.configs.EncryptSecret.transfer_encrypt:type_name -> saas.api.kit.configs.EncryptSecret.TransferEncrypt
	21, // 37: saas.api.kit.configs.EncryptSecret.service_encrypt:type_name -> saas.api.kit.configs.EncryptSecret.ServiceEncrypt
	22, // 38: saas.api.kit.configs.EncryptSecret.token_encrypt:type_name -> saas.api.kit.configs.EncryptSecret.TokenEncrypt
	23, // 39: saas.api.kit.configs.ClientApi.cluster_service:type_name -> saas.api.kit.configs.ClientApi.Endpoint
	23, // 40: saas.api.kit.configs.ClientApi.third_party:type_name -> saas.api.kit.configs.ClientApi.Endpoint
	24, // 41: saas.api.kit.configs.Log.File.rotate_time:type_name -> google.protobuf.Duration
	24, // 42: saas.api.kit.configs.Log.File.storage_age:type_name -> google.protobuf.Duration
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_api_config_config_proto_init() }
func file_api_config_config_proto_init() {
	if File_api_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rabbitmq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snowflake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Captcha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecret_TransferEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecret_ServiceEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecret_TokenEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientApi_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_config_config_proto_goTypes,
		DependencyIndexes: file_api_config_config_proto_depIdxs,
		MessageInfos:      file_api_config_config_proto_msgTypes,
	}.Build()
	File_api_config_config_proto = out.File
	file_api_config_config_proto_rawDesc = nil
	file_api_config_config_proto_goTypes = nil
	file_api_config_config_proto_depIdxs = nil
}
