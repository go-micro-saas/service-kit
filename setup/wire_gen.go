// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package setuputil

import (
	"github.com/go-micro-saas/service-kit/auth"
	"github.com/go-micro-saas/service-kit/config"
	"github.com/go-micro-saas/service-kit/consul"
	"github.com/go-micro-saas/service-kit/jaeger"
	"github.com/go-micro-saas/service-kit/logger"
	"github.com/go-micro-saas/service-kit/mysql"
	"github.com/go-micro-saas/service-kit/postgres"
	"github.com/go-micro-saas/service-kit/rabbitmq"
	"github.com/go-micro-saas/service-kit/redis"
	"github.com/google/wire"
)

// Injectors from wire.go:

func setupLauncherManager(configFilePath string) (LauncherManager, error) {
	bootstrap, err := LoadingConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	log := configutil.LogConfig()
	app := configutil.AppConfig()
	loggerManager, err := loggerutil.NewSingletonLoggerManager(log, app)
	if err != nil {
		return nil, err
	}
	mySQL := configutil.MysqlConfig()
	mysqlManager, err := mysqlutil.NewSingletonMysqlManager(mySQL, loggerManager)
	if err != nil {
		return nil, err
	}
	psql := configutil.PostgresConfig()
	postgresManager, err := postgresutil.NewSingletonPostgresManager(psql, loggerManager)
	if err != nil {
		return nil, err
	}
	redis := configutil.RedisConfig()
	redisManager, err := redisutil.NewSingletonRedisManager(redis)
	if err != nil {
		return nil, err
	}
	encrypt_TokenEncrypt := configutil.TokenEncryptConfig()
	universalClient, err := redisutil.GetRedisClient(redisManager)
	if err != nil {
		return nil, err
	}
	authInstance, err := authutil.NewSingletonAuthInstance(encrypt_TokenEncrypt, universalClient, loggerManager)
	if err != nil {
		return nil, err
	}
	consul := configutil.ConsulConfig()
	consulManager, err := consulutil.NewSingletonConsulManager(consul)
	if err != nil {
		return nil, err
	}
	jaeger := configutil.JaegerConfig()
	jaegerManager, err := jaegerutil.NewSingletonJaegerManager(jaeger)
	if err != nil {
		return nil, err
	}
	rabbitmq := configutil.RabbitmqConfig()
	rabbitmqManager, err := rabbitmqutil.NewSingletonRabbitmqManager(rabbitmq, loggerManager)
	if err != nil {
		return nil, err
	}
	launcherManager, err := Setup(bootstrap, loggerManager, mysqlManager, postgresManager, redisManager, authInstance, consulManager, jaegerManager, rabbitmqManager)
	if err != nil {
		return nil, err
	}
	return launcherManager, nil
}

// wire.go:

var (
	LoggerProviderSet   = wire.NewSet(configutil.LogConfig, configutil.AppConfig, loggerutil.NewSingletonLoggerManager)
	MysqlProviderSet    = wire.NewSet(configutil.MysqlConfig, mysqlutil.NewSingletonMysqlManager)
	PostgresProviderSet = wire.NewSet(configutil.PostgresConfig, postgresutil.NewSingletonPostgresManager)
	RedisProviderSet    = wire.NewSet(configutil.RedisConfig, redisutil.NewSingletonRedisManager)
	AuthProviderSet     = wire.NewSet(configutil.TokenEncryptConfig, redisutil.GetRedisClient, authutil.NewSingletonAuthInstance)
	ConsulProviderSet   = wire.NewSet(configutil.ConsulConfig, consulutil.NewSingletonConsulManager)
	JaegerProviderSet   = wire.NewSet(configutil.JaegerConfig, jaegerutil.NewSingletonJaegerManager)
	RabbitmqProviderSet = wire.NewSet(configutil.RabbitmqConfig, rabbitmqutil.NewSingletonRabbitmqManager)
)
